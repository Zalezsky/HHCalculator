import { useState, useEffect } from 'react';

export default function HendersonHasselbalchCalculator() {
  const bufferOptions = [
    { name: "Phosphate pKa1", pKa: 2.14 },
    { name: "Phosphate pKa2", pKa: 7.2 },
    { name: "Phosphate pKa3", pKa: 12.37 },
    { name: "Citrate pKa1", pKa: 6.39 },
    { name: "Citrate pKa2", pKa: 4.76 },
    { name: "Citrate pKa3", pKa: 3.13 },
    { name: "Acetate", pKa: 4.76 },
    { name: "Histidine Carboxyl", pKa: 1.7 },
    { name: "Histidine Imidazole", pKa: 6.04 },
    { name: "Histidine Amino", pKa: 9.09 },
    { name: "Imidazole", pKa: 6.95 },
    { name: "Tris", pKa: 8.07 },
    { name: "Bis-Tris", pKa: 6.46 },
    { name: "Glycine Carboxyl", pKa: 2.34 },
    { name: "Glycine Amino", pKa: 9.58 },
    { name: "Arginine Carboxyl", pKa: 2.03 },
    { name: "Arginine Amino", pKa: 9.0 },
    { name: "Arginine-Guanidine", pKa: 12.1 },
    { name: "Glutamic Acid Carboxyl pKa1", pKa: 2.16 },
    { name: "Glutamic Acid Carboxyl pKa2", pKa: 4.15 },
    { name: "Glutamic Acid Amino pKa3", pKa: 9.58 },
    { name: "MES", pKa: 6.1 },
    { name: "MOPS", pKa: 7.2 },
    { name: "MOPSO", pKa: 6.9 },
    { name: "TAPSO", pKa: 7.635 },
    { name: "TAPS", pKa: 8.44 },
    { name: "ADA", pKa: 6.6 },
    { name: "PIPES pKa1", pKa: 2.67 },
    { name: "PIPES pKa2", pKa: 6.76 },
    { name: "Custom", pKa: 7.0 }
  ];

  const [selectedBuffer, setSelectedBuffer] = useState(bufferOptions[0]);
  const [pKa, setPKa] = useState(bufferOptions[0].pKa);
  const [desiredPH, setDesiredPH] = useState(7.0);
  const [totalBufferConcentration, setTotalBufferConcentration] = useState(1.0);
  const [bufferUnit, setBufferUnit] = useState("molar");
  const [resultUnit, setResultUnit] = useState("molar");
  const [acidConcentration, setAcidConcentration] = useState(null);
  const [baseConcentration, setBaseConcentration] = useState(null);

  useEffect(() => {
    setPKa(selectedBuffer.pKa);
  }, [selectedBuffer]);

  const handleBufferChange = (e) => {
    const selected = bufferOptions.find(buffer => buffer.name === e.target.value);
    if (selected) {
      setSelectedBuffer(selected);
    }
  };

  const calculateConcentrations = () => {
    if (desiredPH < 0 || desiredPH > 14 || totalBufferConcentration <= 0 || isNaN(pKa)) {
      return { error: "Invalid input. pH must be between 0–14 and concentration must be positive." };
    }

    const ratio = Math.pow(10, desiredPH - pKa);
    const acidConc = totalBufferConcentration / (1 + ratio);
    const baseConc = totalBufferConcentration - acidConc;

    const conversionFactor = bufferUnit === "millimolar" ? 0.001 : 1;
    const resultFactor = resultUnit === "millimolar" ? 1000 : 1;

    return {
      acidConcentration: acidConc * conversionFactor * resultFactor,
      baseConcentration: baseConc * conversionFactor * resultFactor
    };
  };

  const handleCalculate = () => {
    const result = calculateConcentrations();
    if (result.error) {
      setAcidConcentration(null);
      setBaseConcentration(null);
      alert(result.error);
    } else {
      setAcidConcentration(result.acidConcentration);
      setBaseConcentration(result.baseConcentration);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-md">
      <div className="flex flex-col items-center mb-6">
        {/* You can replace with a real image if desired */}
        {/* <img src="/logo.png" alt="pKanalytical Logo" className="h-16 mb-3 object-contain" /> */}
        <h1 className="text-2xl font-bold text-center text-blue-600">
          pKanalytical Henderson–Hasselbalch Calculator
        </h1>
      </div>

      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Select Buffer Type:</label>
          <select
            value={selectedBuffer.name}
            onChange={handleBufferChange}
            className="w-full p-2 border border-gray-300 rounded-md"
          >
            {bufferOptions.map((buffer) => (
              <option key={buffer.name} value={buffer.name}>{buffer.name}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Buffer pKa value:</label>
          <input
            type="number"
            step="0.01"
            value={pKa}
            onChange={(e) => setPKa(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
          <p className="text-xs text-gray-500 mt-1">You can manually edit the pKa value</p>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Desired Final pH:</label>
          <input
            type="number"
            step="0.1"
            min="0"
            max="14"
            value={desiredPH}
            onChange={(e) => setDesiredPH(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Total Buffer Concentration:</label>
          <div className="flex gap-2">
            <input
              type="number"
              step="0.01"
              min="0.0001"
              value={totalBufferConcentration}
              onChange={(e) => setTotalBufferConcentration(parseFloat(e.target.value) || 0)}
              className="flex-grow p-2 border border-gray-300 rounded-md"
            />
            <select
              value={bufferUnit}
              onChange={(e) => setBufferUnit(e.target.value)}
              className="p-2 border border-gray-300 rounded-md"
            >
              <option value="molar">M</option>
              <option value="millimolar">mM</option>
            </select>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Display Results In:</label>
          <select
            value={resultUnit}
            onChange={(e) => setResultUnit(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded-md"
          >
            <option value="molar">Molar (M)</option>
            <option value="millimolar">Millimolar (mM)</option>
          </select>
        </div>

        <button
          onClick={handleCalculate}
          className="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md transition"
        >
          Calculate Concentrations
        </button>

        {acidConcentration !== null && baseConcentration !== null && (
          <div className="mt-6 p-4 bg-gray-100 rounded-lg">
            <h2 className="text-lg font-medium text-gray-800 mb-3">Results:</h2>
            <div className="flex justify-between">
              <span className="font-medium">Acidic Form [HA]:</span>
              <span className="font-bold text-blue-700">{acidConcentration.toFixed(3)} {resultUnit === "molar" ? "M" : "mM"}</span>
            </div>
            <div className="flex justify-between mt-2">
              <span className="font-medium">Basic Form [A⁻]:</span>
              <span className="font-bold text-blue-700">{baseConcentration.toFixed(3)} {resultUnit === "molar" ? "M" : "mM"}</span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
